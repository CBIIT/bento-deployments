@Library('datacommons-jenkins-shared-library@c3dc-os-backup') _

pipeline {
	agent {
		node {
			//label 'cicd_microservice'
			label 'build-agent'
		}
	}

	parameters {

        extendedChoice(
            name: 'Environment',
            defaultValue: 'dev',
            description: 'Choose the environment to build',
            type: 'PT_SINGLE_SELECT',
            value: 'test')

        booleanParam(
            defaultValue: true,
            name: 'UpdateDeploymentVersion')
  }

  options {
  	ansiColor('xterm')
	timestamps()
  }

  environment {

      PROJECT      = "bento"
	  SERVICE      = "files"
	  APP          = "files"
	  ECR_REPO     = "bento-files"
	  DEPLOY_JOB   = "DeployFiles"
	  SLACK_SECRET = "bento_slack_url"
	  CODE_REPO    = "bento-files"
	  JOB_PATH     = "Bento/_jobs"
	  REGION       = "us-east-1"
	  DEPLOY_REPO  = "${env.PROJECT}-deployments"
      CODE_FOLDER  = "${env.PROJECT}-${env.SERVICE}"
	  ENV          = "${params.Environment}"

  }

  stages{
  	stage('checkout'){
  		steps {

  		checkout([$class: 'GitSCM',
			branches: [[name: "${params.Environment}"]],
			extensions: [[$class: 'SubmoduleOption', 
			recursiveSubmodules: true],
			[$class: 'RelativeTargetDirectory',
			relativeTargetDir: "${env.PROJECT}-deployments"]],
			userRemoteConfigs:
			[[url: "https://github.com/CBIIT/${env.DEPLOY_REPO}"]]])

        }

  	}

  	stage('Update Deployment Manifest'){

 		steps {
 			
			script {
                if (params.UpdateDeploymentVersion) {
                    writeDeployment(
                        service: "${env.APP}",
						//additionalProperties: ["usage": "TESTING WRITE",
						//						"value": 1,
						//						"next_value": "Bob"],
                        deploymentFile: "${env.PROJECT}-deployments/deployments.yaml",
                        deploymentRepoUrl: "https://github.com/CBIIT/${env.DEPLOY_REPO}",
                        deploymentCheckoutDirectory: "${env.PROJECT}-deployments"
                    )
                }
            }

 		}

  	}


  }

  post {



    cleanup {

        cleanWs()

    }

  }

}